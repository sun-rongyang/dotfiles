""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           MAIN VIM CONFIGURATION                           "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Vundle configuration
set nocompatible              " required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" Add all your plugins here (note older versions of Vundle used Bundle instead of Plugin)

"" Interface
Plugin 'altercation/vim-colors-solarized' "solarized scheme
Plugin 'tomasr/molokai' "molokai : A port of the monokai scheme for TextMate 
Plugin 'vim-scripts/phd' "phd : Color theme with dark blue background for coding 
Plugin 'vim-airline/vim-airline' "A lite vim powerline
Plugin 'vim-airline/vim-airline-themes' "airline themes

"" Coding
" General
Plugin 'nathanaelkane/vim-indent-guides' "A plugin for visually displaying indent levels in Vim. 
Plugin 'dyng/ctrlsf.vim' " combine ack search contents under whole project
Plugin 'SirVer/ultisnips' "snips engine
Plugin 'honza/vim-snippets' "snips plugin
Plugin 'ctrlpvim/ctrlp.vim' "Fuzzy file, buffer, mru, tag, etc finder. http://kien.github.com/ctrlp.vim
Plugin 'tacahiroy/ctrlp-funky'
Plugin 'tmhedberg/SimpylFold' "No-BS Python code folding for Vim
Plugin 'Valloric/YouCompleteMe' "A code-completion engine for Vim
Plugin 'Raimondi/delimitMate' "provides insert mode auto-completion for quotes, parens, brackets, etc.
Plugin 'Chiel92/vim-autoformat' "Provide easy code formatting in Vim
Plugin 'scrooloose/nerdcommenter' "Vim plugin for intensely orgasmic commenting
Plugin 'scrooloose/nerdtree' "A tree explorer plugin for vim 
Plugin 'CodeFalling/fcitx-vim-osx' "Modified fcitx.vim for osx
Plugin 'derekwyatt/vim-fswitch' "Vim plug for switching between companion source files
Plugin 'majutsushi/tagbar' "Vim plugin that displays tags in a window, ordered by scope
Plugin 'vim-scripts/indexer.tar.gz' "indexing all files in project with ctags
Plugin 'vim-scripts/DfrankUtil' "Just a library that indexer dependant
Plugin 'vim-scripts/vimprj' "Plugin for managing options for different projects that inderxer plugin dependent
Plugin 'vim-scripts/DrawIt' "Ascii drawing plugin: lines, ellipses, arrows, fills, and more! 
" Language dependency
" C/C++
Plugin 'octol/vim-cpp-enhanced-highlight' "Improved C++ syntax highlight 
"Markdown plugins
Plugin 'tamlok/vim-markdown' "Markdown highlight 
Plugin 'iamcco/mathjax-support-for-mkdp' "Mathjax support for Markdown
Plugin 'iamcco/markdown-preview.vim' "Markdown preview
Plugin 'joker1007/vim-markdown-quote-syntax' "Markdown code syntax
"TeX/LaTeX
"Plugin 'lervag/vimtex' "A modern vim plugin for editing LaTeX files.
"make/cmake
Plugin 'richq/vim-cmake-completion' "Cmake completion
"xml
"Plugin 'othree/xml.vim' "helps editing xml (and [x]html, sgml, xslt) files

"" Others
"Plugin 'ervandew/supertab' "Supertab bound plugin.
Plugin 'tpope/vim-obsession' "Plugin that create vim session

" All of your Plugins must be added before the following line
"-----------------------------------------------------
call vundle#end()            " required
filetype plugin indent on    " required

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                           GENERAL CONFIGURATION                            "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" About save the configuration file
" Update configuration after save immediately
autocmd BufWritePost $MYVIMRC source $MYVIMRC

"" About search
" Search along with type in
set incsearch
" Ignore case search
set ignorecase
" Close compatible mode
set nocompatible
" Turn on Ex mode complete feature
set wildmenu

" About display
" Color scheme
set background=dark
"colorscheme solarized
colorscheme molokai
"colorscheme phd
" Turn off cursor blink
set gcr=a:block-blinkon0
" 禁止显示滚动条
set guioptions-=l
set guioptions-=L
set guioptions-=r
set guioptions-=R
" 禁止显示菜单和工具条
set guioptions-=m
set guioptions-=T
" 总是显示状态栏
set laststatus=2
" 显示光标当前位置
set ruler
" 开启行号显示
set number
" 高亮显示当前行/列
set cursorline
set cursorcolumn
" 高亮显示搜索结果
set hlsearch
syntax on "语法高亮

"" About movement
" Insert mode use <Leader> + hjkl to move 
"inoremap <Leader>h <C-o>h
"inoremap <Leader>j <C-o>j
"inoremap <Leader>k <C-o>k
"inoremap <Leader>l <C-o>l

"" About indent
filetype indent on " 自适应不同语言的智能缩进
" 将制表符扩展为空格
set expandtab
" 设置编辑时制表符占用空格数
set tabstop=4
" 设置格式化时制表符占用空格数
set shiftwidth=4
"让 vim 把连续数量的空格视为一个制表符
set softtabstop=4
" 修复 backspace 键
set backspace=2

"" About folding
"set foldmethod=indent
set foldmethod=syntax
set foldlevel=99
let fortran_fold=1 " add fold feature for fortran file
au BufWinLeave * silent mkview  " 保存文件的折叠状态
au BufRead * silent loadview    " 恢复文件的折叠状态
nnoremap <space> za             " 用空格来切换折叠状态
"augroup XML
    "autocmd!
    "autocmd FileType xml setlocal foldmethod=indent foldlevelstart=999 foldminlines=0
"augroup END

"" About spell check
" set insert mode spell check
autocmd InsertEnter * setlocal spell
autocmd InsertLeave * setlocal nospell
" reset the spell check highlight, only for console mode
if has("gui_running")
" do nothing, pass
else
    hi clear SpellBad
    hi SpellBad cterm=bold,italic ctermfg=red
endif
" check either English or Chinese/Japanese/Korean
set spelllang=en,cjk

"" About Leader key
" Define the Leader key
let mapleader=";"

"" Others configuration
" Use system's clipboard
set clipboard=unnamed
" Load different configuration file for different file type
filetype plugin on

"--------------各种插件配置-------------------

" indent guides configuration
" 随 vim 自启动
let g:indent_guides_enable_on_vim_startup=1
" 从第二层开始可视化显示缩进
let g:indent_guides_start_level=2
" 色块宽度
let g:indent_guides_guide_size=1
" 快捷键 i 开/关缩进可视化
:nmap <silent> <Leader>i <Plug>IndentGuidesToggle

" air-line configuration
set t_Co=256
let g:airline_theme="simple" 
let g:airline_powerline_fonts = 1
" 开启tabline
let g:airline#extensions#tabline#enabled = 1
" tabline中当前buffer两端的分隔字符
let g:airline#extensions#tabline#left_sep = ' ' 
" tabline中未激活buffer两端的分隔字符
let g:airline#extensions#tabline#left_alt_sep = '|' 
"tabline中buffer显示编号
let g:airline#extensions#tabline#buffer_nr_show = 1
" 映射切换 buffer 的键位, 在 buffer 没有保存的情况下强制切换
nnoremap [b :bp!<CR>
nnoremap ]b :bn!<CR>

" SimplyFold config
let g:SimpylFold_docstring_preview = 1

" NERDTree config
map <C-n> :NERDTreeToggle<CR>

" vimtex config
"let g:vimtex_enabled = 0
"let g:tex_flavor = 'latex'

" Markdown config
" Highlight
let g:markdown_enable_insert_mode_mappings = 0
" Preview
let g:mkdp_path_to_chrome = "open -a Safari"
let g:mkdp_auto_close=0
nmap <F7> <Plug>MarkdownPreview
nmap <F8> <Plug>StopMarkdownPreview

" Cmake completion config
set nocp

" make YCM compatible with UltiSnips (using supertab)
"let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
"let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
"let g:SuperTabDefaultCompletionType = '<C-n>'

" better key bindings for UltiSnipsExpandTrigger
let g:UltiSnipsExpandTrigger = "<leader><tab>"
let g:UltiSnipsJumpForwardTrigger = "<leader><tab>"
let g:UltiSnipsJumpBackwardTrigger = "<leader><s-tab>"

" config for CtrlP
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
    \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_extensions = ['funky']

" content search in project
" search the word under the cursor. Reminder: search in project
nnoremap <Leader>sp :CtrlSF<CR>
" search the word form input. Reminder: search input
nnoremap <Leader>si :CtrlSF<Space>
let g:ctrlsf_default_root = "project+fw"
let g:ctrlsf_default_view_mode = 'compact'

" vim-fswitch
nmap <silent> <Leader>sw :FSHere<cr>

" ctags
" 正向遍历同名标签
nmap <Leader>tn :tnext<CR>
" 反向遍历同名标签
nmap <Leader>tp :tprevious<CR>
" tagbar
" 设置 tagbar 子窗口的位置出现在主编辑区的左边 
let tagbar_left=1 
" 设置显示／隐藏标签列表子窗口的快捷键。速记：identifier list by tag
nnoremap <Leader>ilt :TagbarToggle<CR> 
" 设置标签子窗口的宽度 
let tagbar_width=32 
" tagbar 子窗口中不显示冗余帮助信息 
let g:tagbar_compact=1
" 设置 ctags 对哪些代码标识符生成标签
let g:tagbar_type_cpp = {
    \ 'kinds' : [
         \ 'c:classes:0:1',
         \ 'd:macros:0:1',
         \ 'e:enumerators:0:0', 
         \ 'f:functions:0:1',
         \ 'g:enumeration:0:1',
         \ 'l:local:0:1',
         \ 'm:members:0:1',
         \ 'n:namespaces:0:1',
         \ 'p:functions_prototypes:0:1',
         \ 's:structs:0:1',
         \ 't:typedefs:0:1',
         \ 'u:unions:0:1',
         \ 'v:global:0:1',
         \ 'x:external:0:1'
     \ ],
     \ 'sro'        : '::',
     \ 'kind2scope' : {
         \ 'g' : 'enum',
         \ 'n' : 'namespace',
         \ 'c' : 'class',
         \ 's' : 'struct',
         \ 'u' : 'union'
     \ },
     \ 'scope2kind' : {
         \ 'enum'      : 'g',
         \ 'namespace' : 'n',
         \ 'class'     : 'c',
         \ 'struct'    : 's',
         \ 'union'     : 'u'
     \ }
\ }

" inderxer
" 设置插件 indexer 调用 ctags 的参数
" 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v
" 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl
let g:indexer_ctagsCommandLineOptions="--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"

" YCM configuration
" complete works in comments
let g:ycm_complete_in_comments=1
" autoload .ycm_extra_conf.py
let g:ycm_confirm_extra_conf=0
" set complete form
let g:ycm_min_num_of_chars_for_completion=1
let g:ycm_cache_omnifunc=0
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_autoclose_preview_window_after_completion=1
" jump to declaration/definition
nnoremap <leader>jc :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>

"" personal habits
" QuicklyRun
map <F5> :call CompileRunGcc()<CR>
    func! CompileRunGcc()
        exec "w"
        if &filetype == 'c'
            "%< means that the present file name exclude postfix
            exec "!g++ % -o %<"
            exec "!time ./%<"
        elseif &filetype == 'cpp'
            exec "!g++ % -o %<"
            exec "!time ./%<"
        elseif &filetype == 'fortran'
            exec "!gfortran % -o %<"
            exec "!./%<"
        elseif &filetype == 'java'
            exec "!javac %"
            exec "!time java %<"
        elseif &filetype == 'sh'
            :!time bash %
        elseif &filetype == 'python'
            exec "!time python3 %"
        elseif &filetype == 'html'
            exec "!firefox % &"
        elseif &filetype == 'go'
            exec "!time go run %"
        endif
    endfunc
map <F6> :call RunAlpspython() <CR>
    func! RunAlpspython()
        exec "w"
        if &filetype == 'python'
            exec "!time alpspython %"
        endif
    endfunc
